// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";

/**
 * @dev Stage
 */
interface IStage is IERC721 {}

/**
 * @dev SignStageStorage.
 */
contract SignStageStorage {

    IStage public Stage;

    uint256 public constant MAXFEE = 10000;

    // Signing data.
    struct Info {
        address idol;           
        uint256 stageId;        
        uint256 startTime;      
        uint256 endTime;        
        uint256 fee;        // The sharing ratio of the stage, 100% equal 10000.
    }

    // Mapping from bytes32 to infoï¼Œbytes32 is generated by the signature data.
    mapping(bytes32 => Info) public signInfos;

    // Mapping from idol address to bytes32[].
    mapping(address => bytes32[]) public idols;

    // Mapping from stageId to bytes32[].
    mapping(uint256 => bytes32[]) public stages;

    // Idol with a signed at the end of the stage.
    mapping(address => mapping(uint256 => bytes32)) public idolStages;

    // Stage setting.
    struct StageSet {
        uint256 minSignTime;    
        uint256 fee;            
        bool isStart;           
    }

    // Mapping from stageId to stageSet.
    mapping(uint256 => StageSet) internal stageSets;

    event SetStage(address _address);
    event SetStageMinSignTime(uint256 stageId , uint256 times);
    event SetStageFee(uint256 stageId , uint256 fee);
    event StartSign(uint256 stageId);
    event CloseSign(uint256 stageId);
    event SignInfo(address _address , uint256 stageId , uint256 startTime , uint256 endTime , uint256 fee);

}
